import express from 'express';
import cors from 'cors';
import path from 'path';
import dotenv from 'dotenv';
import sqlite3 from 'sqlite3';
import jwt from 'jsonwebtoken';
import { Request, Response, NextFunction } from 'express';
import fs from 'fs';
import { WebSocketServer, WebSocket } from 'ws';
import http from 'http';
import multer from 'multer';
import AWS from 'aws-sdk';
import axios from 'axios';
import { WebhookQueue, webhookQueue } from './webhookQueue';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –û—Ç–¥–∞—á–∞ production-—Ñ—Ä–æ–Ω—Ç–∞
const frontendDist = path.resolve(__dirname, '../public');
app.use(express.static(frontendDist));

// --- SQLite setup ---
const dbPath = path.resolve(__dirname, '../florist.sqlite');
const db = new sqlite3.Database(dbPath);

db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    login TEXT UNIQUE,
    password TEXT,
    name TEXT,
    role TEXT DEFAULT 'florist',
    amocrm_id TEXT,
    completed_orders TEXT DEFAULT '[]',
    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
    updated_at TEXT DEFAULT CURRENT_TIMESTAMP
  )`);

  // –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã—Ö ID –∑–∞–∫–∞–∑–æ–≤
  db.run(`CREATE TABLE IF NOT EXISTS order_ids (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    order_id TEXT NOT NULL UNIQUE,
    amocrm_lead_id TEXT NOT NULL,
    deal_name TEXT,
    delivery_address TEXT,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP
  )`);

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  const florists = [
    { login: 'florist1', password: 'pass1', name: '–ê–Ω–Ω–∞', role: 'florist' },
    { login: 'florist2', password: 'pass2', name: '–ò—Ä–∏–Ω–∞', role: 'florist' },
    { login: 'florist3', password: 'pass3', name: '–ú–∞—Ä–∏—è', role: 'florist' },
    { login: 'sonya', password: 'secret', name: '–°–æ–Ω—è', role: 'florist' },
    { login: 'admin', password: 'admin', name: '–ê–¥–º–∏–Ω', role: 'admin' }
  ];
  florists.forEach(f => {
    db.run(
      'INSERT OR IGNORE INTO users (login, password, name, role, completed_orders) VALUES (?, ?, ?, ?, ?)',
      [f.login, f.password, f.name, f.role, '[]']
    );
  });
});

const JWT_SECRET = process.env.JWT_SECRET || 'supersecret';

// --- –¢–∏–ø—ã ---
interface User {
  id: number;
  login: string;
  password: string;
  name: string;
  role: string;
}

declare module 'express-serve-static-core' {
  interface Request {
    user?: any;
    file?: Express.Multer.File;
  }
}

// --- –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º ---
const sostavPath = path.resolve(__dirname, '../sostav.json');
const adminPhotoPath = path.resolve(__dirname, '../admin-photo.json');
const allWebhooksLog = path.resolve(__dirname, '../../logs/webhooks/all_webhooks.log');
const processedWebhooksLog = path.resolve(__dirname, '../../logs/webhooks/processed_webhooks.log');
const uploadErrorsLog = path.resolve(__dirname, '../../logs/app/upload_errors.log');

// --- –ü–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è ID ---
const orderIdsBackupPath = path.resolve(__dirname, '../order_ids_backup.json');
const orderIdsLockPath = path.resolve(__dirname, '../order_ids.lock');
const idAssignmentLogPath = path.resolve(__dirname, '../../logs/app/id_assignments.log');

// --- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –ª–æ–≥–æ–≤ ---
function ensureLogDirectories() {
  const dirs = [
    path.dirname(idAssignmentLogPath),
    path.dirname(orderIdsBackupPath)
  ];
  
  dirs.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
  });
}

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
ensureLogDirectories();

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function logToFile(filePath: string, data: any) {
  let serialized: string | undefined;
  try {
    serialized = JSON.stringify(data, null, 2);
  } catch {
    serialized = String(data);
  }
  if (serialized === undefined) serialized = 'undefined';
  const logEntry = `[${new Date().toISOString()}]\n${serialized}\n\n`;
  fs.appendFileSync(filePath, logEntry, 'utf8');
}


// === –ü–ï–†–ï–°–¢–†–ê–•–û–í–û–ß–ù–´–ï –ú–ï–•–ê–ù–ò–ó–ú–´ ===

// –§–∞–π–ª–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
function acquireIdLock(timeout = 5000): boolean {
  const lockFile = path.join(__dirname, '..', 'id_assignment.lock');
  const startTime = Date.now();
  
  while (Date.now() - startTime < timeout) {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å lock —Ñ–∞–π–ª
      fs.writeFileSync(lockFile, process.pid.toString(), { flag: 'wx' });
      return true;
    } catch (error) {
      // –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
      const sleepTime = Math.random() * 100 + 50; // 50-150ms
      const endTime = Date.now() + sleepTime;
      while (Date.now() < endTime) {
        // –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
      }
    }
  }
  
  console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è ID');
  return false;
}

// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
function releaseIdLock(): void {
  const lockFile = path.join(__dirname, '..', 'id_assignment.lock');
  try {
    fs.unlinkSync(lockFile);
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ lock —Ñ–∞–π–ª–∞
  }
}

// –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
function backupOrderId(orderId: string, amocrmLeadId: string, dealName: string): void {
  const backupFile = path.join(__dirname, '..', 'order_ids_backup.json');
  
  try {
    let backupData = [];
    
    // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    if (fs.existsSync(backupFile)) {
      const content = fs.readFileSync(backupFile, 'utf-8');
      if (content.trim()) {
        backupData = JSON.parse(content);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    backupData.push({
      order_id: orderId,
      amocrm_lead_id: amocrmLeadId,
      deal_name: dealName,
      backup_timestamp: new Date().toISOString(),
      tomsk_timestamp: getTomskDate().toISOString(),
      process_pid: process.pid
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º
    fs.writeFileSync(backupFile, JSON.stringify(backupData, null, 2));
    
    console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è order_id ${orderId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID –≤ –±–∞–∑–µ –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
function verifyIdUniqueness(orderId: string, dayLetter: string): Promise<boolean> {
  return new Promise((resolve) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      db.get(
        'SELECT COUNT(*) as count FROM order_ids WHERE order_id = ?',
        [orderId],
        (err, row: any) => {
          if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ –ë–î:', err);
            resolve(false);
            return;
          }
          
          if (row.count > 0) {
            console.error(`‚ùå ID ${orderId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!`);
            resolve(false);
            return;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
          const backupFile = path.join(__dirname, '..', 'order_ids_backup.json');
          if (fs.existsSync(backupFile)) {
            try {
              const content = fs.readFileSync(backupFile, 'utf-8');
              if (content.trim()) {
                const backupData = JSON.parse(content);
                const duplicateInBackup = backupData.find((item: any) => item.order_id === orderId);
                
                if (duplicateInBackup) {
                  console.error(`‚ùå ID ${orderId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!`);
                  resolve(false);
                  return;
                }
              }
            } catch (backupError) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', backupError);
            }
          }
          
          console.log(`‚úÖ ID ${orderId} —É–Ω–∏–∫–∞–ª–µ–Ω`);
          resolve(true);
        }
      );
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID:', error);
      resolve(false);
    }
  });
}

// –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è ID
function logIdAssignment(orderId: string, amocrmLeadId: string, dealName: string, existingIds: number[], dayLetter: string): void {
  const logDir = path.join(__dirname, '..', 'logs');
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!fs.existsSync(logDir)) {
    fs.mkdirSync(logDir, { recursive: true });
  }
  
  const logFile = path.join(logDir, `id_assignments_${getTomskDate().toISOString().split('T')[0]}.log`);
  
  const logEntry = {
    timestamp: getTomskDate().toISOString(),
    operation: 'ID_ASSIGNMENT',
    success: true,
    data: {
      order_id: orderId,
      amocrm_lead_id: amocrmLeadId,
      deal_name: dealName,
      day_letter: dayLetter,
      existing_ids_today: existingIds,
      next_available_number: parseInt(orderId.substring(1)),
      total_orders_today: existingIds.length + 1
    },
    process_pid: process.pid,
    security_checks: {
      file_lock_acquired: true,
      uniqueness_verified: true,
      backup_created: true,
      database_saved: true
    }
  };
  
  try {
    const logLine = JSON.stringify(logEntry) + '\n';
    fs.appendFileSync(logFile, logLine);
    console.log(`üìù –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –∑–∞–ø–∏—Å–∞–Ω: ${orderId}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:', error);
  }
}

function saveOrderId(orderId: string, amocrmLeadId: string, dealName: string, deliveryAddress: string): Promise<boolean> {
  return new Promise(async (resolve) => {
    // 1. –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if (!acquireIdLock()) {
      logToFile(processedWebhooksLog, { 
        action: 'save_order_id_lock_failed', 
        order_id: orderId, 
        amocrm_lead_id: amocrmLeadId
      });
      resolve(false);
      return;
    }
    
    try {
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
      const dayLetter = orderId.charAt(0);
      const isUnique = await verifyIdUniqueness(orderId, dayLetter);
      
      if (!isUnique) {
        releaseIdLock();
        logToFile(processedWebhooksLog, { 
          action: 'save_order_id_not_unique', 
          order_id: orderId, 
          amocrm_lead_id: amocrmLeadId
        });
        resolve(false);
        return;
      }
      
      // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—ç–∫–∞–ø
      backupOrderId(orderId, amocrmLeadId, dealName);
      
      // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const now = new Date();
      const tomskTimeString = now.toLocaleString('en-CA', { 
        timeZone: 'Asia/Tomsk',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false
      });
      const [datePart, timePart] = tomskTimeString.split(', ');
      const timestamp = `${datePart}T${timePart}`;
      
      db.run(
        'INSERT OR IGNORE INTO order_ids (order_id, amocrm_lead_id, deal_name, delivery_address, created_at) VALUES (?, ?, ?, ?, ?)',
        [orderId, amocrmLeadId, dealName, deliveryAddress, timestamp],
        function(err) {
          releaseIdLock();
          
          if (err) {
            logToFile(processedWebhooksLog, { 
              action: 'save_order_id_db_error', 
              order_id: orderId, 
              amocrm_lead_id: amocrmLeadId,
              error: err.message 
            });
            resolve(false);
          } else if (this.changes === 0) {
            // –ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∫–æ–Ω—Ñ–ª–∏–∫—Ç)
            logToFile(processedWebhooksLog, { 
              action: 'save_order_id_conflict', 
              order_id: orderId, 
              amocrm_lead_id: amocrmLeadId
            });
            resolve(false);
          } else {
            // 5. –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è
            getTodayOrderIds(dayLetter).then(existingIds => {
              logIdAssignment(orderId, amocrmLeadId, dealName, existingIds, dayLetter);
            });
            
            logToFile(processedWebhooksLog, { 
              action: 'save_order_id_success', 
              order_id: orderId, 
              amocrm_lead_id: amocrmLeadId,
              deal_name: dealName,
              tomsk_time: timestamp,
              backup_created: true,
              uniqueness_verified: true
            });
            resolve(true);
          }
        }
      );
      
    } catch (error) {
      releaseIdLock();
      logToFile(processedWebhooksLog, { 
        action: 'save_order_id_exception', 
        order_id: orderId, 
        amocrm_lead_id: amocrmLeadId,
        error: error instanceof Error ? error.message : 'Unknown error' 
      });
      resolve(false);
    }
  });
}

function checkOrderIdExists(amocrmLeadId: string): Promise<string | null> {
  return new Promise((resolve) => {
    db.get(
      'SELECT order_id FROM order_ids WHERE amocrm_lead_id = ?',
      [amocrmLeadId],
      (err, row: any) => {
        if (err) {
          logToFile(processedWebhooksLog, { 
            action: 'check_order_id_error', 
            amocrm_lead_id: amocrmLeadId,
            error: err.message 
          });
          resolve(null);
        } else {
          resolve(row ? row.order_id : null);
        }
      }
    );
  });
}

function getTodayOrderIds(dayLetter: string): Promise<number[]> {
  return new Promise((resolve) => {
    db.all(
      'SELECT order_id FROM order_ids WHERE order_id LIKE ? ORDER BY order_id',
      [`${dayLetter}%`],
      (err, rows: any[]) => {
        if (err) {
          logToFile(processedWebhooksLog, { 
            action: 'get_today_order_ids_error', 
            day_letter: dayLetter,
            error: err.message 
          });
          resolve([]);
        } else {
          const ids = rows
            .map(row => {
              const numberPart = row.order_id.substring(1);
              return parseInt(numberPart, 10) || 0;
            })
            .filter(num => num > 0)
            .sort((a, b) => a - b);
          resolve(ids);
        }
      }
    );
  });
}

function formatDateField(val: any) {
  // –ï—Å–ª–∏ —ç—Ç–æ timestamp (10 —Ü–∏—Ñ—Ä) ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DD.MM —Å —É—á–µ—Ç–æ–º –¢–æ–º—Å–∫–æ–≥–æ –ø–æ—è—Å–∞ (+7), –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (typeof val === 'string' && /^\d{10}$/.test(val)) {
    const utcDate = new Date(parseInt(val) * 1000);
    const tomskDateString = utcDate.toLocaleDateString('ru-RU', {
      timeZone: 'Asia/Tomsk',
      day: '2-digit',
      month: '2-digit'
    });
    return tomskDateString;
  }
  return val;
}

function normalizeOrderDates(order: any) {
  if (!order.custom_fields) return order;
  order.custom_fields = order.custom_fields.map((f: any) => {
    if (f.name && f.name.toLowerCase().includes('–¥–∞—Ç–∞')) {
      if (Array.isArray(f.values)) {
        f.values = f.values.map((v: any) => {
          if (typeof v === 'object' && v !== null && 'value' in v) {
            return { ...v, value: formatDateField(v.value) };
          } else {
            return formatDateField(v);
          }
        });
      } else if (typeof f.values === 'object' && f.values !== null && 'value' in f.values) {
        f.values.value = formatDateField(f.values.value);
      } else {
        f.values = formatDateField(f.values);
      }
    }
    return f;
  });
  return order;
}

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –∑–∞–∫–∞–∑–æ–≤ ---
function getTomskDate(): Date {
  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¢–æ–º—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
  const now = new Date();
  // –ü–æ–ª—É—á–∞–µ–º –¢–æ–º—Å–∫–æ–µ –≤—Ä–µ–º—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
  const tomskTimeString = now.toLocaleString('en-CA', { 
    timeZone: 'Asia/Tomsk',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: false
  });
  
  // –°–æ–∑–¥–∞–µ–º Date –æ–±—ä–µ–∫—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:SS
  const [datePart, timePart] = tomskTimeString.split(', ');
  const tomskTime = new Date(`${datePart}T${timePart}`);
  return tomskTime;
}

function getDayLetter(date?: Date): string {
  // –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¢–æ–º—Å–∫–∞
  const targetDate = date || getTomskDate();
  const dayOfWeek = targetDate.getDay();
  // 0=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 2=–≤—Ç–æ—Ä–Ω–∏–∫, 3=—Å—Ä–µ–¥–∞, 4=—á–µ—Ç–≤–µ—Ä–≥, 5=–ø—è—Ç–Ω–∏—Ü–∞, 6=—Å—É–±–±–æ—Ç–∞
  const letters = ['G', 'A', 'B', 'C', 'D', 'E', 'F']; // G=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, A=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, B=–≤—Ç–æ—Ä–Ω–∏–∫, –∏ —Ç.–¥.
  return letters[dayOfWeek];
}

async function generateOrderId(date?: Date): Promise<string> {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–æ–º—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–Ω—è
  const tomskDate = date || getTomskDate();
  const dayLetter = getDayLetter(tomskDate);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –∏–∑ SQLite
  const todayIds = await getTodayOrderIds(dayLetter);
  
  // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –Ω–æ–º–µ—Ä
  let nextNumber = 1;
  for (const num of todayIds) {
    if (num === nextNumber) {
      nextNumber++;
    } else {
      break;
    }
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
  const formattedNumber = nextNumber.toString().padStart(3, '0');
  
  // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  logToFile(processedWebhooksLog, {
    action: 'generate_order_id',
    tomsk_date: tomskDate.toISOString(),
    day_of_week: tomskDate.getDay(),
    day_letter: dayLetter,
    generated_id: `${dayLetter}${formattedNumber}`,
    existing_ids_today: todayIds
  });
  
  return `${dayLetter}${formattedNumber}`;
}

function hasOrderId(order: any): boolean {
  if (!order.custom_fields) return false;
  const idField = order.custom_fields.find((f: any) => f.name === '‚ÑñID');
  return !!(idField?.values?.[0]?.value);
}

function readSostav(): any[] {
  if (!fs.existsSync(sostavPath)) return [];
  try {
    return JSON.parse(fs.readFileSync(sostavPath, 'utf8'));
  } catch {
    return [];
  }
}

function writeSostav(sostav: any[]) {
  fs.writeFileSync(sostavPath, JSON.stringify(sostav, null, 2), 'utf8');
}

function readAdminPhoto() {
  if (!fs.existsSync(adminPhotoPath)) return [];
  try {
    return JSON.parse(fs.readFileSync(adminPhotoPath, 'utf8'));
  } catch {
    return [];
  }
}

function writeAdminPhoto(photoRequests: any[]) {
  fs.writeFileSync(adminPhotoPath, JSON.stringify(photoRequests, null, 2), 'utf8');
}

function addToAdminPhoto(order: any) {
  const photoRequests = readAdminPhoto();
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
  const exists = photoRequests.find((item: any) => item.id === order.id);
  if (!exists) {
    photoRequests.push(order);
    writeAdminPhoto(photoRequests);
    logToFile(processedWebhooksLog, { 
      action: 'add_to_admin_photo', 
      order_id: order.id 
    });
  }
}

function removeFromAdminPhoto(orderId: any) {
  let photoRequests = readAdminPhoto();
  const initialLength = photoRequests.length;
  photoRequests = photoRequests.filter((item: any) => String(item.id) !== String(orderId));
  
  if (photoRequests.length !== initialLength) {
    writeAdminPhoto(photoRequests);
    logToFile(processedWebhooksLog, { 
      action: 'remove_from_admin_photo', 
      order_id: orderId 
    });
  }
}

// --- HTTP + WebSocket —Å–µ—Ä–≤–µ—Ä ---
const server = http.createServer(app);
const wss = new WebSocketServer({ port: 3001 });
console.log('WebSocket server started on port 3001');

function broadcastOrdersUpdate() {
  wss.clients.forEach((client: WebSocket) => {
    if (client.readyState === 1) {
      client.send(JSON.stringify({ type: 'orders_updated' }));
    }
  });
}

// --- –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø WebSocket –¥–ª—è isAlive ---
interface ExtWebSocket extends WebSocket {
  isAlive?: boolean;
}

// --- WebSocket ping/pong –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ ---
wss.on('connection', (ws: ExtWebSocket) => {
  ws.isAlive = true;
  ws.on('pong', () => {
    ws.isAlive = true;
  });
});
setInterval(() => {
  wss.clients.forEach((ws: WebSocket) => {
    const extWs = ws as ExtWebSocket;
    if (extWs.isAlive === false) return extWs.terminate();
    extWs.isAlive = false;
    extWs.ping();
  });
}, 30000);

// API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/api/ping', (req, res) => {
  res.json({ message: 'pong' });
});

// --- –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–µ—Ä–µ–¥–∏ –≤–µ–±—Ö—É–∫–æ–≤ ---
app.get('/api/webhook-queue/stats', (req, res) => {
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    queue: webhookQueue.getStats()
  });
});

// --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
app.post('/api/login', (req: Request, res: Response) => {
  const { login, password } = req.body;
  console.log('Login attempt:', { login, password, timestamp: new Date().toISOString() });
  logToFile(processedWebhooksLog, { action: 'login_attempt', login, password, timestamp: new Date().toISOString() });
  
  db.get<User>('SELECT * FROM users WHERE login = ? AND password = ?', [login, password], (err, user) => {
    if (err) {
      console.error('DB error:', err);
      logToFile(processedWebhooksLog, { action: 'login_db_error', error: err.message });
      return res.status(500).json({ error: 'DB error' });
    }
    if (!user) {
      console.log('User not found:', { login, password });
      logToFile(processedWebhooksLog, { action: 'login_failed', login, password });
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }
    console.log('Login successful:', { id: user.id, login: user.login, name: user.name, role: user.role });
    logToFile(processedWebhooksLog, { action: 'login_success', user: { id: user.id, login: user.login, name: user.name, role: user.role } });
    const token = jwt.sign({ id: user.id, login: user.login, name: user.name, role: user.role }, JWT_SECRET, { expiresIn: '7d' });
    res.json({ token, user: { id: user.id, login: user.login, name: user.name, role: user.role } });
  });
});

// --- Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT ---
function auth(req: Request, res: Response, next: NextFunction) {
  const authHeader = req.headers.authorization;
  if (!authHeader) {
    res.status(401).json({ error: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞' });
    return;
  }
  const token = authHeader.split(' ')[1];
  try {
    const payload = jwt.verify(token, JWT_SECRET);
    req.user = payload;
    next();
  } catch {
    res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    return;
  }
}

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ ---
app.get('/api/me', auth, (req, res) => {
  res.json({ user: req.user });
});

// --- –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ (–¥–ª—è –æ—á–µ—Ä–µ–¥–∏) ---
async function processWebhookData(body: any): Promise<void> {
  const contentType = 'application/json';
  logToFile(allWebhooksLog, { method: 'POST', contentType, body });
  let processed = false;

  // amoCRM –º–æ–∂–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å { status/update } –∏–ª–∏ { leads: { status/update } }
  const leadsContainer: any = body && typeof body === 'object' && body.leads && typeof body.leads === 'object'
    ? body.leads
    : body;

  // status webhook
  if (leadsContainer && Array.isArray(leadsContainer.status) && leadsContainer.status.length > 0) {
    const lead = normalizeOrderDates(leadsContainer.status[0]);
    if (lead.status_id === '44828242') {
      let sostav = readSostav();
      const idx = sostav.findIndex((item: any) => item.id === lead.id);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ ID —É –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ
      const existingOrderId = await checkOrderIdExists(lead.id);

      if (!existingOrderId && !hasOrderId(lead)) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID —Å —É—á–µ—Ç–æ–º –¢–æ–º—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        const newOrderId = await generateOrderId();

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–∑—ã
        let deliveryAddress = '';
        if (lead.custom_fields) {
          const addressField = lead.custom_fields.find((f: any) => f.name === '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏');
          deliveryAddress = addressField?.values?.[0]?.value || '';
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        const saved = await saveOrderId(newOrderId, lead.id, lead.name || '', deliveryAddress);

        if (saved) {
          // –î–æ–±–∞–≤–ª—è–µ–º ID –≤ custom_fields
          if (!lead.custom_fields) lead.custom_fields = [];
          const idFieldIdx = lead.custom_fields.findIndex((f: any) => f.name === '‚ÑñID');

          if (idFieldIdx >= 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
            lead.custom_fields[idFieldIdx].values = [{ value: newOrderId }];
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ
            lead.custom_fields.push({
              id: '1055575',
              name: '‚ÑñID',
              values: [{ value: newOrderId }]
            });
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –≤ amoCRM
          try {
            const updateResult = await updateAmoLeadOrderId(lead.id, newOrderId);
            if (updateResult.success) {
              logToFile(processedWebhooksLog, {
                action: 'assign_order_id',
                lead_id: lead.id,
                order_id: newOrderId
              });
            } else {
              logToFile(processedWebhooksLog, {
                action: 'assign_order_id_failed',
                lead_id: lead.id,
                order_id: newOrderId,
                error: updateResult.error
              });
            }
          } catch (error) {
            logToFile(processedWebhooksLog, {
              action: 'assign_order_id_error',
              lead_id: lead.id,
              order_id: newOrderId,
              error: error
            });
          }
        }
      } else if (existingOrderId) {
        // –ï—Å–ª–∏ ID —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –æ–±–Ω–æ–≤–ª—è–µ–º lead
        if (!lead.custom_fields) lead.custom_fields = [];
        const idFieldIdx = lead.custom_fields.findIndex((f: any) => f.name === '‚ÑñID');

        if (idFieldIdx >= 0) {
          lead.custom_fields[idFieldIdx].values = [{ value: existingOrderId }];
        } else {
          lead.custom_fields.push({
            id: '1055575',
            name: '‚ÑñID',
            values: [{ value: existingOrderId }]
          });
        }

        logToFile(processedWebhooksLog, {
          action: 'reuse_existing_order_id',
          lead_id: lead.id,
          order_id: existingOrderId
        });
      }

      if (idx >= 0) {
        sostav[idx] = lead;
      } else {
        sostav.push(lead);
      }
      writeSostav(sostav);
      logToFile(processedWebhooksLog, { action: 'add/update', lead });
      processed = true;
    }
    if (lead.old_status_id === '44828242') {
      let sostav = readSostav();
      const orderToRemove = sostav.find((item: any) => item.id === lead.id);

      // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
      sostav = sostav.filter((item: any) => item.id !== lead.id);
      writeSostav(sostav);

      // –ù–ï —É–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ admin-photo.json –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º send_to_admin
      // –ó–∞–∫–∞–∑—ã —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ admin-photo.json —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ

      logToFile(processedWebhooksLog, { action: 'remove', lead_id: lead.id });
      processed = true;
    }
  }

  // update webhook
  if (leadsContainer && Array.isArray(leadsContainer.update) && leadsContainer.update.length > 0) {
    const lead = normalizeOrderDates(leadsContainer.update[0]);
    if (lead.status_id === '44828242') {
      let sostav = readSostav();
      const idx = sostav.findIndex((item: any) => item.id === lead.id);
      if (idx >= 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ ID —É –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ
        const existingOrderId = await checkOrderIdExists(lead.id);

        if (!existingOrderId && !hasOrderId(lead)) {
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID —Å —É—á–µ—Ç–æ–º –¢–æ–º—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
          const newOrderId = await generateOrderId();

          // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–∑—ã
          let deliveryAddress = '';
          if (lead.custom_fields) {
            const addressField = lead.custom_fields.find((f: any) => f.name === '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏');
            deliveryAddress = addressField?.values?.[0]?.value || '';
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
          const saved = await saveOrderId(newOrderId, lead.id, lead.name || '', deliveryAddress);

          if (saved) {
            // –î–æ–±–∞–≤–ª—è–µ–º ID –≤ custom_fields
            if (!lead.custom_fields) lead.custom_fields = [];
            const idFieldIdx = lead.custom_fields.findIndex((f: any) => f.name === '‚ÑñID');

            if (idFieldIdx >= 0) {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
              lead.custom_fields[idFieldIdx].values = [{ value: newOrderId }];
            } else {
              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ
              lead.custom_fields.push({
                id: '1055575',
                name: '‚ÑñID',
                values: [{ value: newOrderId }]
              });
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –≤ amoCRM
            try {
              const updateResult = await updateAmoLeadOrderId(lead.id, newOrderId);
              if (updateResult.success) {
                logToFile(processedWebhooksLog, {
                  action: 'assign_order_id_update',
                  lead_id: lead.id,
                  order_id: newOrderId
                });
              } else {
                logToFile(processedWebhooksLog, {
                  action: 'assign_order_id_update_failed',
                  lead_id: lead.id,
                  order_id: newOrderId,
                  error: updateResult.error
                });
              }
            } catch (error) {
              logToFile(processedWebhooksLog, {
                action: 'assign_order_id_update_error',
                lead_id: lead.id,
                order_id: newOrderId,
                error: error
              });
            }
          }
        } else if (existingOrderId) {
          // –ï—Å–ª–∏ ID —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –æ–±–Ω–æ–≤–ª—è–µ–º lead
          if (!lead.custom_fields) lead.custom_fields = [];
          const idFieldIdx = lead.custom_fields.findIndex((f: any) => f.name === '‚ÑñID');

          if (idFieldIdx >= 0) {
            lead.custom_fields[idFieldIdx].values = [{ value: existingOrderId }];
          } else {
            lead.custom_fields.push({
              id: '1055575',
              name: '‚ÑñID',
              values: [{ value: existingOrderId }]
            });
          }

          logToFile(processedWebhooksLog, {
            action: 'reuse_existing_order_id_update',
            lead_id: lead.id,
            order_id: existingOrderId
          });
        }

        sostav[idx] = lead;
        writeSostav(sostav);
        logToFile(processedWebhooksLog, { action: 'update', lead });
        processed = true;
      }
    }
  }

  if (processed) {
    broadcastOrdersUpdate();
  } else {
    logToFile(processedWebhooksLog, { action: 'noop', reason: 'unrecognized_payload' });
  }
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ amoCRM ---
app.post('/api/amocrm/webhook', async (req, res) => {
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫ –≤ –æ—á–µ—Ä–µ–¥—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    const webhookId = await webhookQueue.add(req.body);

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç amoCRM (–Ω–µ –∂–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏)
    res.status(200).json({
      status: 'queued',
      webhook_id: webhookId,
      queue_size: webhookQueue.getStats().queueSize,
      message: '–í–µ–±—Ö—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏'
    });

  } catch (error: any) {
    logToFile(processedWebhooksLog, {
      action: 'webhook_queue_add_error',
      error: error.message,
      body: req.body
    });

    res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –≤ –æ—á–µ—Ä–µ–¥—å',
      details: error.message
    });
  }
});

// --- –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞ ---
app.get('/api/orders', auth, (req, res) => {
  const sostav = readSostav();
  const filterType = req.query.filter; // 'photo_requests' –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ
  
  let filteredSostav = sostav;
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
  if (req.user.role === 'admin' && filterType === 'photo_requests') {
    // –î–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ —á–∏—Ç–∞–µ–º –∏–∑ admin-photo.json
    filteredSostav = readAdminPhoto();
  } else if (req.user.role === 'admin' && filterType === 'regular') {
    filteredSostav = sostav.filter((order: any) => order.photo_status !== 'send_to_admin');
  } else if (req.user.role === 'florist') {
    // –î–ª—è —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤ —Å–∫—Ä—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—É
    filteredSostav = sostav.filter((order: any) => order.photo_status !== 'send_to_admin');
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞
  const orders = filteredSostav.map((order: any) => {
    // –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—É—Å–∞ –∏ –∫—Ç–æ –≤–∑—è–ª
    let status = '–°–≤–æ–±–æ–¥–µ–Ω';
    let taken_by = null;
    if (order.taken_by) {
      status = order.status === '–≤—ã–ø–æ–ª–Ω–µ–Ω' ? '–í—ã–ø–æ–ª–Ω–µ–Ω' : `–í–∑—è–ª ${order.taken_by.name}`;
      taken_by = order.taken_by;
    }
    // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (–∏—â–µ–º –≤ custom_fields)
    let date = '';
    let time = '';
    let address = '';
    let orderId = '';
    if (order.custom_fields) {
      for (const f of order.custom_fields) {
        if (f.name === '–î–∞—Ç–∞') date = f.values[0];
        if (f.name === '–í—Ä–µ–º—è') time = f.values[0]?.value || '';
        if (f.name === '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏') address = f.values[0]?.value || '';
        if (f.name === '‚ÑñID') orderId = f.values[0]?.value || '';
      }
    }
    // --- –ù–æ–≤—ã–µ –ø–æ–ª—è ---
    if (!order.photos) order.photos = [];
    if (!order.photo_status) order.photo_status = '';
    return {
      id: order.id,
      name: order.name,
      date,
      time,
      address,
      status,
      taken_by,
      photos: order.photos,
      photo_status: order.photo_status,
      orderId: orderId  // –î–æ–±–∞–≤–ª—è–µ–º ‚ÑñID
    };
  });
  res.json({ orders });
});

// --- –í–∑—è—Ç—å –∑–∞–∫–∞–∑ ---
app.post('/api/orders/:id/take', auth, (req, res) => {
  const sostav = readSostav();
  const orderId = req.params.id;
  const user = req.user;
  const idx = sostav.findIndex((o: any) => o.id == orderId);
  if (idx === -1) {
    res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    return;
  }
  if (sostav[idx].taken_by && sostav[idx].status !== '–≤—ã–ø–æ–ª–Ω–µ–Ω') {
    res.status(400).json({ error: '–ó–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º —Ñ–ª–æ—Ä–∏—Å—Ç–æ–º' });
    return;
  }
  sostav[idx].taken_by = { id: user.id, name: user.name };
  sostav[idx].status = '–≤–∑—è–ª';
  writeSostav(sostav);
  logToFile(processedWebhooksLog, { action: 'take', order_id: orderId, user });
  broadcastOrdersUpdate();
  res.json({ success: true });
});

// --- –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ id ---
app.get('/api/orders/:id', auth, (req: Request, res: Response) => {
  const id = req.params.id;
  const sostav = readSostav();
  const order = sostav.find((item: any) => String(item.id) === String(id));
  if (!order) {
    res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    return;
  }
  res.json({ order });
});

// --- –û—Å–≤–æ–±–æ–¥–∏—Ç—å –∑–∞–∫–∞–∑ ---
app.post('/api/orders/:id/release', auth, (req, res) => {
  const sostav = readSostav();
  const orderId = req.params.id;
  const idx = sostav.findIndex((o: any) => String(o.id) === String(orderId));
  if (idx === -1) {
    res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    return;
  }
  sostav[idx].taken_by = null;
  sostav[idx].status = undefined;
  writeSostav(sostav);
  logToFile(processedWebhooksLog, { action: 'release', order_id: orderId });
  broadcastOrdersUpdate();
  res.json({ success: true });
});

// --- –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ ---
app.post('/api/orders/:id/complete', auth, (req: Request, res: Response) => {
  const sostav = readSostav();
  const orderId = req.params.id;
  const idx = sostav.findIndex((o: any) => String(o.id) === String(orderId));
  if (idx === -1) {
    res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    return;
  }
  sostav[idx].status = '–≤—ã–ø–æ–ª–Ω–µ–Ω';
  writeSostav(sostav);
  logToFile(processedWebhooksLog, { action: 'complete', order_id: orderId, user: req.user });
  broadcastOrdersUpdate();
  res.json({ success: true, order: sostav[idx] });
});

// --- –ü–æ–ª—É—á–∏—Ç—å id –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
app.get('/api/my-active-order', auth, (req, res) => {
  const sostav = readSostav();
  const userId = req.user && req.user.id;
  const activeOrder = sostav.find((order: any) => order.taken_by && order.taken_by.id === userId && order.status !== '–≤—ã–ø–æ–ª–Ω–µ–Ω');
  res.json({ orderId: activeOrder ? activeOrder.id : null });
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AWS S3
const s3 = new AWS.S3({
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  region: process.env.AWS_REGION,
  endpoint: process.env.AWS_S3_ENDPOINT,
  s3ForcePathStyle: true
});
const S3_BUCKET = process.env.AWS_S3_BUCKET;
function isS3Configured(): boolean {
  return Boolean(
    S3_BUCKET &&
    process.env.AWS_ACCESS_KEY_ID &&
    process.env.AWS_SECRET_ACCESS_KEY &&
    (process.env.AWS_REGION || process.env.AWS_S3_ENDPOINT)
  );
}

// Multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const upload = multer({ storage: multer.memoryStorage() });

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
app.post('/api/orders/:id/photo', auth, upload.single('photo'), async (req: Request, res: Response): Promise<void> => {
  const orderId = req.params.id;
  let sostav = readSostav();
  let idx = sostav.findIndex((o: any) => String(o.id) === String(orderId));
  let isFromAdminPhoto = false;
  
  // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ sostav.json, –∏—â–µ–º –≤ admin-photo.json
  if (idx === -1) {
    sostav = readAdminPhoto();
    idx = sostav.findIndex((o: any) => String(o.id) === String(orderId));
    isFromAdminPhoto = true;
  }
  
  if (idx === -1) {
    res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    return;
  }
  if (!req.file) {
    res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
    return;
  }
  if (!isS3Configured()) {
    res.status(500).json({ error: '–•—Ä–∞–Ω–∏–ª–∏—â–µ S3 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è AWS_* –∏ AWS_S3_BUCKET.' });
    return;
  }
  const fileName = `${orderId}/${Date.now()}-${req.file.originalname}`;
  try {
    const uploadResult = await s3.upload({
      Bucket: S3_BUCKET!,
      Key: fileName,
      Body: req.file.buffer,
      ContentType: req.file.mimetype,
      ACL: 'public-read'
    }).promise();
    if (!sostav[idx].photos) sostav[idx].photos = [];
    sostav[idx].photos.push({
      url: uploadResult.Location,
      uploadedBy: req.user.name,
      userId: req.user.id,
      date: new Date().toISOString()
    });
    if (req.user.role === 'admin') {
      const wasPhotoRequest = sostav[idx].photo_status === 'send_to_admin';
      sostav[idx].photo_status = 'uploaded_admin';
      
      // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –∏–∑ admin-photo.json, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ admin-photo.json
      if (isFromAdminPhoto && wasPhotoRequest) {
        writeAdminPhoto(sostav);
        // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —É–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ admin-photo.json
        removeFromAdminPhoto(orderId);
      } else {
        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º sostav.json
        writeSostav(sostav);
      }
      try {
        const result = await updateAmoLeadPhoto(orderId, uploadResult.Location, false); // –í—Å–µ–≥–¥–∞ false!
        
        if (result.success) {
          const action = wasPhotoRequest ? 'admin_photo_for_request' : 'admin_photo_direct';
          console.log(`–ó–∞–∫–∞–∑ ${orderId}: —Ñ–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º –±–µ–∑ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞`);
          logToFile(processedWebhooksLog, { 
            action, 
            order_id: orderId, 
            user: req.user,
            photoUrl: uploadResult.Location,
            wasPhotoRequest,
            statusChangeSkipped: true,
            removedFromAdminPhoto: wasPhotoRequest
          });
        } else {
          console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∑–∞–∫–∞–∑–∞ ${orderId} –≤ amoCRM (–∞–¥–º–∏–Ω):`, result.error);
        }
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –∑–∞–∫–∞–∑–∞ ${orderId} –≤ amoCRM (–∞–¥–º–∏–Ω):`, err);
      }
    } else {
      sostav[idx].photo_status = 'uploaded_florist';
      writeSostav(sostav);
    }
    broadcastOrdersUpdate();
    
    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–ª–æ—Ä–∏—Å—Ç–æ–º - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ amoCRM
    if (sostav[idx].status === '–≤—ã–ø–æ–ª–Ω–µ–Ω' && req.user.role === 'florist') {
      try {
        const statusId = 76172434; // ID —Å—Ç–∞—Ç—É—Å–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω" –≤ amoCRM
        const result = await updateAmoLead(orderId, statusId, uploadResult.Location);
        if (result.success) {
          console.log(`–ó–∞–∫–∞–∑ ${orderId} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ amoCRM —Å —Ñ–æ—Ç–æ`);
          logToFile(processedWebhooksLog, { 
            action: 'auto_finalize_with_photo', 
            order_id: orderId, 
            user: req.user,
            photoUrl: uploadResult.Location 
          });
        } else {
          console.error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–∫–∞–∑–∞ ${orderId} –≤ amoCRM:`, result.error);
          logToFile(processedWebhooksLog, { 
            action: 'auto_finalize_error', 
            order_id: orderId, 
            user: req.user,
            error: result.error 
          });
        }
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ –∑–∞–∫–∞–∑–∞ ${orderId} –≤ amoCRM:`, err);
        logToFile(processedWebhooksLog, { 
          action: 'auto_finalize_exception', 
          order_id: orderId, 
          user: req.user,
          error: String(err) 
        });
      }
    }
    
    broadcastOrdersUpdate();
    res.json({ success: true, photoUrl: uploadResult.Location, order: sostav[idx] });
  } catch (err) {
    try {
      logToFile(uploadErrorsLog, { context: 's3.upload', orderId, fileName, bucket: S3_BUCKET, error: (err as any)?.message || String(err), stack: (err as any)?.stack });
    } catch {}
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3', details: (err as any)?.message || String(err) });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
app.delete('/api/orders/:id/photo', auth, async (req: Request, res: Response): Promise<void> => {
  const orderId = req.params.id;
  const { url } = req.body;
  if (!url) {
    res.status(400).json({ error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω url —Ñ–æ—Ç–æ' });
    return;
  }
  let sostav = readSostav();
  let idx = sostav.findIndex((o: any) => String(o.id) === String(orderId));
  let isFromAdminPhoto = false;
  
  // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ sostav.json, –∏—â–µ–º –≤ admin-photo.json
  if (idx === -1) {
    sostav = readAdminPhoto();
    idx = sostav.findIndex((o: any) => String(o.id) === String(orderId));
    isFromAdminPhoto = true;
  }
  
  if (idx === -1) {
    res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    return;
  }
  const order = sostav[idx];
  if (!order.photos) order.photos = [];
  const photoIdx = order.photos.findIndex((p: any) => p.url === url);
  if (photoIdx === -1) {
    res.status(404).json({ error: '–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    return;
  }
  // –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞
  const [removedPhoto] = order.photos.splice(photoIdx, 1);
  // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ S3
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ –±–∞–∫–µ—Ç–∞
    const urlObj = new URL(url);
    const key = urlObj.pathname.replace(/^\//, '');
    await s3.deleteObject({ Bucket: S3_BUCKET!, Key: key }).promise();
  } catch (err) {
    // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ S3
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ S3:', err);
  }
  // –ï—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ñ–æ—Ç–æ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
  if (!order.photos.length) {
    order.photo_status = '';
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
  if (isFromAdminPhoto) {
    writeAdminPhoto(sostav);
  } else {
    writeSostav(sostav);
  }
  broadcastOrdersUpdate();
  res.json({ success: true, order });
});

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ amoCRM ---
async function updateAmoLead(leadId: string, statusId: number, photoUrl?: string) {
  const url = `${process.env.AMO_BASE_URL}/api/v4/leads/${leadId}`;
  const headers = {
    'Authorization': `Bearer ${process.env.AMO_ACCESS_TOKEN}`,
    'Content-Type': 'application/json'
  };
  
  const payload: any = {
    status_id: statusId,
  };

  if (photoUrl) {
    payload.custom_fields_values = [
      {
        field_id: 1055419, // ID –ø–æ–ª—è –¥–ª—è —Ñ–æ—Ç–æ
        values: [{ value: photoUrl }]
      }
    ];
  }

  try {
    await axios.patch(url, payload, { headers });
    logToFile(processedWebhooksLog, { action: 'update_amo_lead', leadId, statusId, photoUrl });
    return { success: true };
  } catch (error: any) {
    logToFile(uploadErrorsLog, {
      context: 'update_amo_lead',
      leadId,
      error: error.response?.data || error.message
    });
    return { success: false, error: error.response?.data || error.message };
  }
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –≤ amoCRM (–±–µ–∑ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞) ---
async function updateAmoLeadPhoto(leadId: string, photoUrl: string, changeStatus: boolean = false) {
  const url = `${process.env.AMO_BASE_URL}/api/v4/leads/${leadId}`;
  const headers = {
    'Authorization': `Bearer ${process.env.AMO_ACCESS_TOKEN}`,
    'Content-Type': 'application/json'
  };
  
  const payload: any = {
    custom_fields_values: [
      {
        field_id: 1055419, // ID –ø–æ–ª—è –¥–ª—è —Ñ–æ—Ç–æ
        values: [{ value: photoUrl }]
      }
    ]
  };

  // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
  if (changeStatus) {
    payload.status_id = 76172434; // ID —Å—Ç–∞—Ç—É—Å–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω"
  }

  try {
    await axios.patch(url, payload, { headers });
    logToFile(processedWebhooksLog, { action: 'update_amo_lead_photo', leadId, photoUrl, changeStatus });
    return { success: true };
  } catch (error: any) {
    logToFile(uploadErrorsLog, {
      context: 'update_amo_lead_photo',
      leadId,
      error: error.response?.data || error.message
    });
    return { success: false, error: error.response?.data || error.message };
  }
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è ‚ÑñID –≤ amoCRM ---
async function updateAmoLeadOrderId(leadId: string, orderId: string) {
  const url = `${process.env.AMO_BASE_URL}/api/v4/leads/${leadId}`;
  const headers = {
    'Authorization': `Bearer ${process.env.AMO_ACCESS_TOKEN}`,
    'Content-Type': 'application/json'
  };
  
  const payload = {
    custom_fields_values: [
      {
        field_id: 1055575, // ID –ø–æ–ª—è –¥–ª—è ‚ÑñID
        values: [{ value: orderId }]
      }
    ]
  };

  try {
    await axios.patch(url, payload, { headers });
    logToFile(processedWebhooksLog, { action: 'update_amo_lead_order_id', leadId, orderId });
    return { success: true };
  } catch (error: any) {
    logToFile(uploadErrorsLog, {
      context: 'update_amo_lead_order_id',
      leadId,
      error: error.response?.data || error.message
    });
    return { success: false, error: error.response?.data || error.message };
  }
}

// --- –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É ---
app.post('/api/orders/:id/send-to-admin', auth, async (req: Request, res: Response): Promise<void> => {
  const orderId = req.params.id;
  const sostav = readSostav();
  const idx = sostav.findIndex((o: any) => String(o.id) === String(orderId));
  
  if (idx === -1) {
    res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω
  if (sostav[idx].status !== '–≤—ã–ø–æ–ª–Ω–µ–Ω') {
    res.status(400).json({ error: '–ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω' });
    return;
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É"
  sostav[idx].photo_status = 'send_to_admin';
  
  // –°–ù–ê–ß–ê–õ–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ admin-photo.json –î–û –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ amoCRM
  addToAdminPhoto(sostav[idx]);
  
  // –ó–ê–¢–ï–ú —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ sostav.json
  writeSostav(sostav);
  
  // –ü–û–¢–û–ú –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ amoCRM (–ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ webhook –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –∏–∑ sostav.json)
  try {
    const statusId = 76172434; // ID —Å—Ç–∞—Ç—É—Å–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω" –≤ amoCRM
    const result = await updateAmoLead(orderId, statusId);
    if (result.success) {
      console.log(`–ó–∞–∫–∞–∑ ${orderId} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ amoCRM –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É`);
      logToFile(processedWebhooksLog, { 
        action: 'send_to_admin_with_stage_change', 
        order_id: orderId, 
        user: req.user 
      });
    } else {
      console.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–∫–∞–∑–∞ ${orderId} –≤ amoCRM –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É:`, result.error);
    }
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –∑–∞–∫–∞–∑–∞ ${orderId} –≤ amoCRM –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É:`, err);
  }
  logToFile(processedWebhooksLog, { 
    action: 'send_to_admin', 
    order_id: orderId, 
    user: req.user 
  });
  
  broadcastOrdersUpdate();
  res.json({ success: true, message: '–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É –∏ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ amoCRM' });
});

// --- –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ (–ø–µ—Ä–µ–≤–æ–¥ –≤ amoCRM) ---
app.post('/api/orders/:id/finalize', auth, async (req: Request, res: Response): Promise<void> => {
  const orderId = req.params.id;
  const { action, photoUrl } = req.body; // action: 'to_admin' | 'self_complete'

  const statusId = 76172434; // ID —Å—Ç–∞—Ç—É—Å–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω"

  if (action === 'to_admin') {
    const result = await updateAmoLead(orderId, statusId);
    if (result.success) {
      res.json({ success: true, message: '–°–¥–µ–ª–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ amoCRM' });
    } else {
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–¥–µ–ª–∫—É –≤ amoCRM', details: result.error });
    }
  } else if (action === 'self_complete') {
    if (!photoUrl) {
      res.status(400).json({ error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω URL —Ñ–æ—Ç–æ' });
      return;
    }
    const result = await updateAmoLead(orderId, statusId, photoUrl);
    if (result.success) {
      res.json({ success: true, message: '–°–¥–µ–ª–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –∏ —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ amoCRM' });
    } else {
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–¥–µ–ª–∫—É –≤ amoCRM', details: result.error });
    }
  } else {
    res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
  }
});


// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ ---
(global as any).webhookProcessor = processWebhookData;

// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
server.listen(PORT, () => {
  console.log(`üöÄ Server listening on port ${PORT}`);
  console.log(`üì® Webhook queue initialized. Queue size: ${webhookQueue.getStats().queueSize}`);
});

// SPA fallback –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞ (Express 5) ‚Äî —Ç–µ–ø–µ—Ä—å –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ!
app.get(/^\/(?!api).*/, (req, res) => {
  res.sendFile(path.join(frontendDist, 'index.html'));
});

// –õ–æ–≥–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ HTTP GET –Ω–∞ /ws
app.get('/ws', (req, res) => {
  console.log('HTTP GET /ws');
  res.status(400).send('Not a WebSocket');
});

// –í —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞:
fs.watchFile(sostavPath, { interval: 1000 }, (curr, prev) => {
  if (curr.mtime !== prev.mtime) {
    broadcastOrdersUpdate();
  }
}); 