import * as fs from 'fs';
import * as path from 'path';

interface WebhookItem {
  id: string;
  data: any;
  timestamp: number;
  retries: number;
  priority: number;
}

export class WebhookQueue {
  private queue: WebhookItem[] = [];
  private processing = false;
  private maxRetries = 3;
  private maxQueueSize = 1000;
  private processingDelay = 100; // ms –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–∞–º–∏
  private queueFile = path.join(process.cwd(), 'backend', 'webhook_queue_backup.json');

  constructor() {
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    process.on('SIGTERM', () => this.saveQueue());
    process.on('SIGINT', () => this.saveQueue());
    process.on('beforeExit', () => this.saveQueue());

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    this.restoreQueue();
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å
  async add(data: any, priority = 0): Promise<string> {
    const id = `wh_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

    const item: WebhookItem = {
      id,
      data,
      timestamp: Date.now(),
      retries: 0,
      priority
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    this.queue.push(item);
    this.queue.sort((a, b) => b.priority - a.priority);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
    if (this.queue.length > this.maxQueueSize) {
      const removed = this.queue.splice(this.maxQueueSize);
      console.warn(`‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ ${removed.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    }

    console.log(`üì® –í–µ–±—Ö—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å: ${id}, —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: ${this.queue.length}`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∏–¥–µ—Ç
    if (!this.processing) {
      setTimeout(() => this.processQueue(), this.processingDelay);
    }

    return id;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
  private async processQueue(): Promise<void> {
    if (this.processing || this.queue.length === 0) return;

    this.processing = true;
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏. –≠–ª–µ–º–µ–Ω—Ç–æ–≤: ${this.queue.length}`);

    while (this.queue.length > 0) {
      const item = this.queue.shift()!;

      try {
        await this.processWebhook(item);

        console.log(`‚úÖ –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${item.id}, –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${Date.now() - item.timestamp}ms`);

      } catch (error: any) {
        item.retries++;

        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞ ${item.id}:`, error.message);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
        if (item.retries < this.maxRetries) {
          this.queue.unshift(item);
          console.log(`üîÑ –í–µ–±—Ö—É–∫ ${item.id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å, –ø–æ–ø—ã—Ç–∫–∞ ${item.retries}/${this.maxRetries}`);
        } else {
          console.error(`üíÄ –í–µ–±—Ö—É–∫ ${item.id} –æ—Ç–±—Ä–æ—à–µ–Ω –ø–æ—Å–ª–µ ${item.retries} –ø–æ–ø—ã—Ç–æ–∫`);
        }
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, this.processingDelay));
    }

    this.processing = false;
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –≤–µ–±—Ö—É–∫–∞
  private async processWebhook(item: WebhookItem): Promise<void> {
    const { data } = item;

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if ((global as any).webhookProcessor) {
      await (global as any).webhookProcessor(data);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –≤ —Ñ–∞–π–ª (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞)
  private saveQueue(): void {
    if (this.queue.length > 0) {
      try {
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        const dir = path.dirname(this.queueFile);
        if (!fs.existsSync(dir)) {
          fs.mkdirSync(dir, { recursive: true });
        }

        fs.writeFileSync(this.queueFile, JSON.stringify(this.queue, null, 2));
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å –∏–∑ ${this.queue.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏:', error.message);
      }
    }
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  private restoreQueue(): void {
    if (fs.existsSync(this.queueFile)) {
      try {
        const data = JSON.parse(fs.readFileSync(this.queueFile, 'utf8'));

        // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        const now = Date.now();
        this.queue = data.filter((item: WebhookItem) => {
          return now - item.timestamp < 60 * 60 * 1000; // 1 —á–∞—Å
        });

        console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å –∏–∑ ${this.queue.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);

        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        fs.unlinkSync(this.queueFile);

        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
        if (this.queue.length > 0 && !this.processing) {
          setTimeout(() => this.processQueue(), 1000);
        }
      } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏:', error.message);
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏
  getStats() {
    return {
      queueSize: this.queue.length,
      processing: this.processing,
      maxRetries: this.maxRetries,
      oldestItem: this.queue.length > 0 ?
        Date.now() - this.queue[this.queue.length - 1].timestamp : 0,
      newestItem: this.queue.length > 0 ?
        Date.now() - this.queue[0].timestamp : 0
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ (–¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
  clear(): number {
    const cleared = this.queue.length;
    this.queue = [];
    return cleared;
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  forceProcess(): void {
    if (!this.processing) {
      setTimeout(() => this.processQueue(), 10);
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—á–µ—Ä–µ–¥–∏
export const webhookQueue = new WebhookQueue();