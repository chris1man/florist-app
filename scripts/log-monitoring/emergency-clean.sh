#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –±–æ–ª—å—à–∏—Ö –ª–æ–≥–æ–≤
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –±–æ–ª—å—à–∏–º–∏ –ª–æ–≥–∞–º–∏

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"
LOGS_DIR="$PROJECT_ROOT/logs"
CRITICAL_SIZE_MB=50
CRITICAL_SIZE_BYTES=$((CRITICAL_SIZE_MB * 1024 * 1024))

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
check_file_size() {
    local file_path="$1"
    if [[ -f "$file_path" ]]; then
        local size=$(stat -c%s "$file_path" 2>/dev/null || stat -f%z "$file_path" 2>/dev/null)
        echo "$size"
    else
        echo "0"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–∞
emergency_clean_log() {
    local log_file="$1"
    local filename=$(basename "$log_file")
    local size=$(check_file_size "$log_file")
    local size_mb=$((size / 1024 / 1024))
    
    log "${RED}üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê: $filename (${size_mb}MB)${NC}"
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    local backup_file="${log_file}.emergency_backup_$(date '+%Y%m%d_%H%M%S')"
    cp "$log_file" "$backup_file"
    log "${YELLOW}üì¶ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $(basename "$backup_file")${NC}"
    
    # –û—á–∏—â–∞–µ–º –ª–æ–≥, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
    if [[ -f "$log_file" ]]; then
        tail -100 "$log_file" > "${log_file}.tmp" && mv "${log_file}.tmp" "$log_file"
        
        local new_size=$(check_file_size "$log_file")
        local new_size_mb=$((new_size / 1024 / 1024))
        
        log "${GREEN}‚úÖ –õ–æ–≥ –æ—á–∏—â–µ–Ω: ${size_mb}MB ‚Üí ${new_size_mb}MB${NC}"
        log "${GREEN}‚úÖ –û—Å—Ç–∞–≤–ª–µ–Ω–æ 100 —Å—Ç—Ä–æ–∫${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –±–æ–ª—å—à–∏—Ö –ª–æ–≥–æ–≤
find_critical_logs() {
    local critical_files=()
    
    while IFS= read -r -d '' log_file; do
        if [[ -f "$log_file" ]]; then
            local size=$(check_file_size "$log_file")
            if [[ $size -gt $CRITICAL_SIZE_BYTES ]]; then
                critical_files+=("$log_file")
            fi
        fi
    done < <(find "$LOGS_DIR" -name "*.log" -type f -print0)
    
    echo "${critical_files[@]}"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
show_statistics() {
    log "${BLUE}=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤ ===${NC}"
    
    echo "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤:"
    du -sh "$LOGS_DIR" 2>/dev/null || echo "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º"
    
    echo
    echo "–†–∞–∑–º–µ—Ä—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:"
    du -sh "$LOGS_DIR"/* 2>/dev/null || echo "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º"
    
    echo
    echo "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–∞—Ö:"
    local critical_files=($(find_critical_logs))
    for log_file in "${critical_files[@]}"; do
        if [[ -f "$log_file" ]]; then
            local lines=$(wc -l < "$log_file" 2>/dev/null || echo "0")
            local size=$(check_file_size "$log_file")
            local size_mb=$((size / 1024 / 1024))
            echo "  $(basename "$log_file"): ${lines} —Å—Ç—Ä–æ–∫, ${size_mb}MB"
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
interactive_clean() {
    local critical_files=($(find_critical_logs))
    
    if [[ ${#critical_files[@]} -eq 0 ]]; then
        log "${GREEN}‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –±–æ–ª—å—à–∏—Ö –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ${NC}"
        return 0
    fi
    
    log "${YELLOW}‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${#critical_files[@]} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –±–æ–ª—å—à–∏—Ö –ª–æ–≥–æ–≤:${NC}"
    
    for i in "${!critical_files[@]}"; do
        local log_file="${critical_files[$i]}"
        local filename=$(basename "$log_file")
        local size=$(check_file_size "$log_file")
        local size_mb=$((size / 1024 / 1024))
        echo "  $((i+1))) $filename (${size_mb}MB)"
    done
    
    echo
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    echo "1) –û—á–∏—Å—Ç–∏—Ç—å –í–°–ï –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –±–æ–ª—å—à–∏–µ –ª–æ–≥–∏"
    echo "2) –í—ã–±—Ä–∞—Ç—å –ª–æ–≥–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ –æ–¥–Ω–æ–º—É"
    echo "3) –û—Ç–º–µ–Ω–∞"
    echo
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): " choice
    
    case $choice in
        1)
            log "${RED}üö® –û—á–∏—Å—Ç–∫–∞ –í–°–ï–• –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –±–æ–ª—å—à–∏—Ö –ª–æ–≥–æ–≤...${NC}"
            for log_file in "${critical_files[@]}"; do
                emergency_clean_log "$log_file"
            done
            ;;
        2)
            log "${YELLOW}–í—ã–±–æ—Ä –ª–æ–≥–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏...${NC}"
            for log_file in "${critical_files[@]}"; do
                local filename=$(basename "$log_file")
                local size=$(check_file_size "$log_file")
                local size_mb=$((size / 1024 / 1024))
                
                read -p "–û—á–∏—Å—Ç–∏—Ç—å $filename (${size_mb}MB)? [y/N]: " confirm
                if [[ $confirm =~ ^[Yy]$ ]]; then
                    emergency_clean_log "$log_file"
                else
                    log "${BLUE}‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω: $filename${NC}"
                fi
            done
            ;;
        3)
            log "${BLUE}–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏${NC}"
            return 0
            ;;
        *)
            log "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}"
            return 1
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
auto_clean() {
    local critical_files=($(find_critical_logs))
    
    if [[ ${#critical_files[@]} -eq 0 ]]; then
        log "${GREEN}‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –±–æ–ª—å—à–∏—Ö –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ${NC}"
        return 0
    fi
    
    log "${YELLOW}‚ö†Ô∏è  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ ${#critical_files[@]} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –±–æ–ª—å—à–∏—Ö –ª–æ–≥–æ–≤...${NC}"
    
    for log_file in "${critical_files[@]}"; do
        emergency_clean_log "$log_file"
    done
    
    log "${GREEN}‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
}

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
main() {
    log "${RED}üö® === –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –õ–û–ì–û–í ===${NC}"
    log "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä: ${CRITICAL_SIZE_MB}MB"
    log "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: $LOGS_DIR"
    
    echo
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    echo "1) –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤"
    echo "2) –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –±–æ–ª—å—à–∏—Ö –ª–æ–≥–æ–≤"
    echo "3) –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º"
    echo "4) –í—ã—Ö–æ–¥"
    echo
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): " choice
    
    case $choice in
        1)
            show_statistics
            ;;
        2)
            auto_clean
            ;;
        3)
            interactive_clean
            ;;
        4)
            log "${GREEN}–í—ã—Ö–æ–¥${NC}"
            exit 0
            ;;
        *)
            log "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}"
            exit 1
            ;;
    esac
    
    echo
    log "${GREEN}‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
if [[ $EUID -ne 0 ]]; then
    log "${RED}‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –æ—Ç root${NC}"
    exit 1
fi

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
main "$@"
